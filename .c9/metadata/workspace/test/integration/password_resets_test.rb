{"filter":false,"title":"password_resets_test.rb","tooltip":"/test/integration/password_resets_test.rb","undoManager":{"stack":[[{"start":{"row":41,"column":4},"end":{"row":41,"column":54},"action":"remove","lines":["assert_select 'div#<CSS id for error explanation>'"],"id":1597},{"start":{"row":41,"column":4},"end":{"row":41,"column":41},"action":"insert","lines":["assert_select 'div#error_explanation'"]}],[{"start":{"row":41,"column":22},"end":{"row":41,"column":23},"action":"remove","lines":["#"],"id":1598}],[{"start":{"row":41,"column":22},"end":{"row":41,"column":23},"action":"insert","lines":["."],"id":1599}],[{"start":{"row":41,"column":22},"end":{"row":41,"column":23},"action":"remove","lines":["."],"id":1600}],[{"start":{"row":41,"column":22},"end":{"row":41,"column":23},"action":"insert","lines":["#"],"id":1601}],[{"start":{"row":0,"column":0},"end":{"row":58,"column":3},"action":"remove","lines":["require 'test_helper'","","class PasswordResetsTest < ActionDispatch::IntegrationTest","  ","  def setup","    ActionMailer::Base.deliveries.clear","    @user = users(:greg)","  end","  ","  test \"password resets\" do","    get new_password_reset_path","    assert_template 'password_resets/new'","    #Invalid email","    post password_resets_path, password_reset: { email: \"\" }","    assert_not flash.empty?","    assert_template 'password_resets/new'","    #Valid email","    post password_resets_path, password_reset: { email: @user.email }","    assert_not_equal @user.reset_digest, @user.reload.reset_digest","    assert_equal 1, ActionMailer::Base.deliveries.size","    assert_not flash.empty?","    assert_redirected_to root_url","    # Password reset form","    user = assigns(:user)","    #Wrong email","    get edit_password_reset_path(user.reset_token, email: \"\")","    assert_redirected_to root_url","    #Inactive user","    user.toggle!(:activated)","    get edit_password_reset_path(user.reset_token, email: user.email)","    assert_redirected_to root_url","    user.toggle!(:activated)","    #Right email, wrong token","    get edit_password_reset_path(user.reset_token, email: user.email)","    assert_template 'password_resets/edit'","    assert_select \"input[name=email][type=hidden][value=?]\", user.email","    #Invalid password & confirmation","    patch password_reset_path(user.reset_token),","          email: user.email,","          user: { password:               \"foobaz\",","                  password_confirmation:  \"barquux\" }","    assert_select 'div#error_explanation'","    #Blank password","    patch password_reset_path(user.reset_token),","          email: user.email,","          user: { password:               \"   \",","                  password_confirmation:  \"foobar\" }","    assert_not flash.empty?","    assert_template 'password_resets/edit'","    #Valid password & confirmation","    patch password_reset_path(user.reset_token),","          email: user.email,","          user: { password:               \"foobaz\",","                  password_confirmation:  \"foobaz\" }","    assert is_logged_in?","    assert_not flash.empty?","    assert_redirected_to user","  end","end"],"id":1602},{"start":{"row":0,"column":0},"end":{"row":60,"column":3},"action":"insert","lines":["require 'test_helper'","","class PasswordResetsTest < ActionDispatch::IntegrationTest","  def setup","    ActionMailer::Base.deliveries.clear","    @user = users(:michael)","  end","","  test \"password resets\" do","    get new_password_reset_path","    assert_template 'password_resets/new'","    # Invalid email","    post password_resets_path, password_reset: { email: \"\" }","    assert_not flash.empty?","    assert_template 'password_resets/new'","    # Valid email","    post password_resets_path, password_reset: { email: @user.email }","    assert_not_equal @user.reset_digest, @user.reload.reset_digest","    assert_equal 1, ActionMailer::Base.deliveries.size","    assert_not flash.empty?","    assert_redirected_to root_url","    # Password reset form","    user = assigns(:user)","    # Wrong email","    get edit_password_reset_path(user.reset_token, email: \"\")","    assert_redirected_to root_url","    # Inactive user","    user.toggle!(:activated)","    get edit_password_reset_path(user.reset_token, email: user.email)","    assert_redirected_to root_url","    user.toggle!(:activated)","    # Right email, wrong token","    get edit_password_reset_path('wrong token', email: user.email)","    assert_redirected_to root_url","    # Right email, right token","    get edit_password_reset_path(user.reset_token, email: user.email)","    assert_template 'password_resets/edit'","    assert_select \"input[name=email][type=hidden][value=?]\", user.email","    # Invalid password & confirmation","    patch password_reset_path(user.reset_token),","          email: user.email,","          user: { password:              \"foobaz\",","                  password_confirmation: \"barquux\" }","    assert_select 'div#error_explanation'","    # Blank password","    patch password_reset_path(user.reset_token),","          email: user.email,","          user: { password:              \"  \",","                  password_confirmation: \"foobar\" }","    assert_not flash.empty?","    assert_template 'password_resets/edit'","    # Valid password & confirmation","    patch password_reset_path(user.reset_token),","          email: user.email,","          user: { password:              \"foobaz\",","                  password_confirmation: \"foobaz\" }","    assert is_logged_in?","    assert_not flash.empty?","    assert_redirected_to user","  end","end"]}],[{"start":{"row":5,"column":25},"end":{"row":5,"column":26},"action":"remove","lines":["l"],"id":1603}],[{"start":{"row":5,"column":24},"end":{"row":5,"column":25},"action":"remove","lines":["e"],"id":1604}],[{"start":{"row":5,"column":23},"end":{"row":5,"column":24},"action":"remove","lines":["a"],"id":1605}],[{"start":{"row":5,"column":22},"end":{"row":5,"column":23},"action":"remove","lines":["h"],"id":1606}],[{"start":{"row":5,"column":21},"end":{"row":5,"column":22},"action":"remove","lines":["c"],"id":1607}],[{"start":{"row":5,"column":20},"end":{"row":5,"column":21},"action":"remove","lines":["i"],"id":1608}],[{"start":{"row":5,"column":19},"end":{"row":5,"column":20},"action":"remove","lines":["m"],"id":1609}],[{"start":{"row":5,"column":19},"end":{"row":5,"column":20},"action":"insert","lines":["g"],"id":1610}],[{"start":{"row":5,"column":20},"end":{"row":5,"column":21},"action":"insert","lines":["r"],"id":1611}],[{"start":{"row":5,"column":21},"end":{"row":5,"column":22},"action":"insert","lines":["e"],"id":1612}],[{"start":{"row":5,"column":22},"end":{"row":5,"column":23},"action":"insert","lines":["g"],"id":1613}],[{"start":{"row":0,"column":0},"end":{"row":61,"column":0},"action":"remove","lines":["require 'test_helper'","","class PasswordResetsTest < ActionDispatch::IntegrationTest","  def setup","    ActionMailer::Base.deliveries.clear","    @user = users(:greg)","  end","","  test \"password resets\" do","    get new_password_reset_path","    assert_template 'password_resets/new'","    # Invalid email","    post password_resets_path, password_reset: { email: \"\" }","    assert_not flash.empty?","    assert_template 'password_resets/new'","    # Valid email","    post password_resets_path, password_reset: { email: @user.email }","    assert_not_equal @user.reset_digest, @user.reload.reset_digest","    assert_equal 1, ActionMailer::Base.deliveries.size","    assert_not flash.empty?","    assert_redirected_to root_url","    # Password reset form","    user = assigns(:user)","    # Wrong email","    get edit_password_reset_path(user.reset_token, email: \"\")","    assert_redirected_to root_url","    # Inactive user","    user.toggle!(:activated)","    get edit_password_reset_path(user.reset_token, email: user.email)","    assert_redirected_to root_url","    user.toggle!(:activated)","    # Right email, wrong token","    get edit_password_reset_path('wrong token', email: user.email)","    assert_redirected_to root_url","    # Right email, right token","    get edit_password_reset_path(user.reset_token, email: user.email)","    assert_template 'password_resets/edit'","    assert_select \"input[name=email][type=hidden][value=?]\", user.email","    # Invalid password & confirmation","    patch password_reset_path(user.reset_token),","          email: user.email,","          user: { password:              \"foobaz\",","                  password_confirmation: \"barquux\" }","    assert_select 'div#error_explanation'","    # Blank password","    patch password_reset_path(user.reset_token),","          email: user.email,","          user: { password:              \"  \",","                  password_confirmation: \"foobar\" }","    assert_not flash.empty?","    assert_template 'password_resets/edit'","    # Valid password & confirmation","    patch password_reset_path(user.reset_token),","          email: user.email,","          user: { password:              \"foobaz\",","                  password_confirmation: \"foobaz\" }","    assert is_logged_in?","    assert_not flash.empty?","    assert_redirected_to user","  end","end",""],"id":1614},{"start":{"row":0,"column":0},"end":{"row":60,"column":3},"action":"insert","lines":["require 'test_helper'","","class PasswordResetsTest < ActionDispatch::IntegrationTest","  def setup","    ActionMailer::Base.deliveries.clear","    @user = users(:michael)","  end","","  test \"password resets\" do","    get new_password_reset_path","    assert_template 'password_resets/new'","    # Invalid email","    post password_resets_path, password_reset: { email: \"\" }","    assert_not flash.empty?","    assert_template 'password_resets/new'","    # Valid email","    post password_resets_path, password_reset: { email: @user.email }","    assert_not_equal @user.reset_digest, @user.reload.reset_digest","    assert_equal 1, ActionMailer::Base.deliveries.size","    assert_not flash.empty?","    assert_redirected_to root_url","    # Password reset form","    user = assigns(:user)","    # Wrong email","    get edit_password_reset_path(user.reset_token, email: \"\")","    assert_redirected_to root_url","    # Inactive user","    user.toggle!(:activated)","    get edit_password_reset_path(user.reset_token, email: user.email)","    assert_redirected_to root_url","    user.toggle!(:activated)","    # Right email, wrong token","    get edit_password_reset_path('wrong token', email: user.email)","    assert_redirected_to root_url","    # Right email, right token","    get edit_password_reset_path(user.reset_token, email: user.email)","    assert_template 'password_resets/edit'","    assert_select \"input[name=email][type=hidden][value=?]\", user.email","    # Invalid password & confirmation","    patch password_reset_path(user.reset_token),","          email: user.email,","          user: { password:              \"foobaz\",","                  password_confirmation: \"barquux\" }","    assert_select 'div#error_explanation'","    # Blank password","    patch password_reset_path(user.reset_token),","          email: user.email,","          user: { password:              \"  \",","                  password_confirmation: \"foobar\" }","    assert_not flash.empty?","    assert_template 'password_resets/edit'","    # Valid password & confirmation","    patch password_reset_path(user.reset_token),","          email: user.email,","          user: { password:              \"foobaz\",","                  password_confirmation: \"foobaz\" }","    assert is_logged_in?","    assert_not flash.empty?","    assert_redirected_to user","  end","end"]}],[{"start":{"row":5,"column":19},"end":{"row":5,"column":26},"action":"remove","lines":["michael"],"id":1615},{"start":{"row":5,"column":19},"end":{"row":5,"column":20},"action":"insert","lines":["g"]}],[{"start":{"row":5,"column":20},"end":{"row":5,"column":21},"action":"insert","lines":["r"],"id":1616}],[{"start":{"row":5,"column":21},"end":{"row":5,"column":22},"action":"insert","lines":["e"],"id":1617}],[{"start":{"row":5,"column":22},"end":{"row":5,"column":23},"action":"insert","lines":["g"],"id":1618}]],"mark":21,"position":21},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":5,"column":23},"end":{"row":5,"column":23},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1432179020512,"hash":"08016d8ccc5c4994e87ad3ff6caf369431fc5bf7"}